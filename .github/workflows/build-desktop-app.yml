name: Build & Publish (Forge)

on:
  push:
    tags: ["v*"] # e.g. v1.0.1
  workflow_dispatch:
    inputs:
      tag:
        description: "Optional tag (leave blank to auto-generate test tag)"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  mac:
    runs-on: macos-latest
    env:
      NODE_VERSION: "20"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - run: npm ci

      # Build mac (keep both arches or just one)
      #- run: npm run make -- --platform=darwin --arch=arm64
      - run: npm run make -- --platform=darwin --arch=x64

      # Ensure DMG + ZIP exist (fail fast if missing)
      - name: Assert DMG & ZIP exist
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          DMGS=(out/make/dmg/darwin/*/*.dmg)
          ZIPS=(out/make/zip/darwin/*/*.zip)
          echo "Found DMGs: ${#DMGS[@]}"
          echo "Found ZIPs: ${#ZIPS[@]}"
          (( ${#DMGS[@]} > 0 )) || { echo "::error::No DMG found"; exit 1; }
          (( ${#ZIPS[@]} > 0 )) || { echo "::error::No ZIP found"; exit 1; }

      - name: Upload mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: |
            out/make/dmg/darwin/**/*
            out/make/zip/darwin/**/*

  windows:
    runs-on: windows-latest
    env:
      NODE_VERSION: "20"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - run: npm ci
      # Optional 64-bit:
      #- run: npm run make -- --platform=win32 --arch=x64
      # Optional 32-bit:
      - run: npm run make -- --platform=win32 --arch=ia32

      - name: Upload win artifacts
        uses: actions/upload-artifact@v4
        with:
          name: win
          path: out/make/squirrel.windows/**/*

  release:
    name: Create GitHub Release with all artifacts
    runs-on: ubuntu-latest
    needs: [mac, windows]
    steps:
      - name: Download mac artifacts
        uses: actions/download-artifact@v4
        with:
          name: mac
          path: dist/mac

      - name: Download win artifacts
        uses: actions/download-artifact@v4
        with:
          name: win
          path: dist/win

      # Set RELEASE_TAG safely (manual input → pushed tag → test-v<run_number>)
      - name: Set release tag
        id: settag
        shell: bash
        run: |
          if [ "${{ github.event.inputs.tag }}" != "" ]; then
            echo "RELEASE_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "RELEASE_TAG=test-v${{ github.run_number }}" >> $GITHUB_ENV
          fi
          echo "Release tag set to: $RELEASE_TAG"

      # (Optional) assert again before publishing
      - name: Assert files present before release
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          ls -al dist/mac || true
          ls -al dist/win || true
          DMG_COUNT=$(ls dist/mac/**/*.dmg 2>/dev/null | wc -l | xargs)
          ZIP_COUNT=$(ls dist/mac/**/*.zip 2>/dev/null | wc -l | xargs)
          EXE_COUNT=$(ls dist/win/**/*Setup.exe 2>/dev/null | wc -l | xargs)
          echo "DMGs: $DMG_COUNT, ZIPs: $ZIP_COUNT, EXEs: $EXE_COUNT"
          [ "$DMG_COUNT" -gt 0 ] || { echo "::error::Missing DMG"; exit 1; }
          [ "$ZIP_COUNT" -gt 0 ] || { echo "::error::Missing ZIP"; exit 1; }
          [ "$EXE_COUNT" -gt 0 ] || { echo "::error::Missing Windows Setup.exe"; exit 1; }

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          draft: ${{ github.event_name == 'workflow_dispatch' }} # draft for manual runs
          prerelease: false
          files: |
            dist/mac/**/*
            dist/win/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
